!function(I){var g={};function n(e){if(g[e])return g[e].exports;var C=g[e]={i:e,l:!1,exports:{}};return I[e].call(C.exports,C,C.exports,n),C.l=!0,C.exports}n.m=I,n.c=g,n.d=function(I,g,e){n.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:e})},n.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},n.t=function(I,g){if(1&g&&(I=n(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var C in I)n.d(e,C,function(g){return I[g]}.bind(null,C));return e},n.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return n.d(g,"a",g),g},n.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/jeffs_frontend_lib/dist/src/computed.js\nvar computedHelper = /** @class */ (function () {\n    function computedHelper(_a) {\n        var computedArgs = _a.computedArgs, nnDependencies = _a.nnDependencies, computedFns = _a.computedFns, nnInstance = _a.nnInstance;\n        this.computedArgs = computedArgs;\n        this.nnInstance = nnInstance;\n        this.computedFns = computedFns;\n        this.nnDependencies = nnDependencies;\n        this.initComputed();\n    }\n    computedHelper.prototype.initComputed = function () {\n        var _this = this;\n        Object.keys(this.computedArgs).forEach(function (computedPropName) {\n            _this.initDependency(computedPropName, _this.computedArgs[computedPropName].dependencies);\n            _this.computedFns[computedPropName] = _this.computedArgs[computedPropName].fn.bind(_this.nnInstance);\n        });\n        var toResolve = new Set(Object.keys(this.computedArgs));\n        var tries = 0;\n        var maxTries = toResolve.size;\n        while (tries < maxTries) {\n            var arr = Array.from(toResolve);\n            for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n                var computedPropName = arr_1[_i];\n                if (this.resolveDependency(computedPropName)) {\n                    toResolve.delete(computedPropName);\n                }\n            }\n            if (!toResolve.size)\n                return;\n            tries++;\n        }\n        throw "unable to resolve computed dependencies";\n    };\n    computedHelper.prototype.initDependency = function (name, propDependencies) {\n        var _this = this;\n        this.computedFns[name] = this.computedArgs[name].fn.bind(this.nnInstance);\n        propDependencies.forEach(function (propDependency) {\n            if (propDependency in _this.nnDependencies) {\n                _this.nnDependencies[propDependency].add(name);\n            }\n            else {\n                _this.nnDependencies[propDependency] = new Set([name]);\n            }\n        });\n    };\n    computedHelper.prototype.allDependenciesResolved = function (name) {\n        var _this = this;\n        var currDependencies = this.computedArgs[name].dependencies;\n        return Array.from(currDependencies).every(function (dependency) { return _this.nnInstance.state[dependency] !== undefined; });\n    };\n    computedHelper.prototype.resolveDependency = function (name) {\n        if (this.allDependenciesResolved(name)) {\n            this.nnInstance.makeReactiveData(name, this.computedFns[name]());\n            return true;\n        }\n        else\n            return false;\n    };\n    computedHelper.prototype.getUpdateComputedCallback = function (key) {\n        var _this = this;\n        return function () {\n            if (key in _this.nnInstance.dependencies) {\n                Array.from(_this.nnInstance.dependencies[key]).forEach(function (computedDependent) {\n                    _this.nnInstance.state[computedDependent] = _this.computedFns[computedDependent]();\n                });\n            }\n        };\n    };\n    return computedHelper;\n}());\n/* harmony default export */ var src_computed = (computedHelper);\n\n// CONCATENATED MODULE: ./node_modules/jeffs_frontend_lib/dist/src/dom/dom.js\nvar domHelper = /** @class */ (function () {\n    function domHelper(_a) {\n        var nnInstance = _a.nnInstance, el = _a.el;\n        this.nnInstance = nnInstance;\n        this.el = el;\n    }\n    domHelper.prototype.attach = function () {\n        var nnInstance = this.nnInstance;\n        nnInstance.$el = document.querySelector(this.el);\n        if (!nnInstance.$el) {\n            throw "cannot attach to nonexistent element";\n        }\n        nnInstance.$el.__nn__ = nnInstance;\n    };\n    domHelper.prototype.getDomUpdateCallback = function (key) {\n        var _this = this;\n        return function () {\n            var nnInstance = _this.nnInstance;\n            if (key in nnInstance.dependentNodes) {\n                nnInstance.dependentNodes[key].forEach(function (node) { return (node.innerHTML = nnInstance.state[key]); });\n            }\n            if (key in nnInstance.modelBindings) {\n                nnInstance.modelBindings[key].forEach(function (node) { return (node.value = nnInstance.state[key]); });\n            }\n            if (key in nnInstance.dynamicHTMLDependencies) {\n                Array.from(nnInstance.dynamicHTMLDependencies[key]).forEach(function (cb) {\n                    return cb();\n                });\n            }\n        };\n    };\n    domHelper.prototype.initReactiveNodes = function () {\n        var nnInstance = this.nnInstance;\n        var reactiveNodes = nnInstance.$el.querySelectorAll("*[nn-txt]");\n        reactiveNodes.forEach(function (node) {\n            var reactingTo = node.getAttribute("nn-txt");\n            if (!nnInstance.dependentNodes[reactingTo])\n                nnInstance.dependentNodes[reactingTo] = [node];\n            else\n                nnInstance.dependentNodes[reactingTo].push(node);\n        });\n    };\n    domHelper.prototype.initModelNodes = function () {\n        var _this = this;\n        var modelNodes = this.nnInstance.$el.querySelectorAll("*[nn-model]");\n        modelNodes.forEach(function (node) {\n            var bound2 = node.getAttribute("nn-model");\n            if (!_this.nnInstance.modelBindings[bound2])\n                _this.nnInstance.modelBindings[bound2] = [node];\n            else\n                _this.nnInstance.modelBindings[bound2].push(node);\n            node.value = _this.nnInstance.state[bound2];\n            node.oninput = function () {\n                _this.nnInstance.state[bound2] = node.value;\n            };\n        });\n    };\n    return domHelper;\n}());\n/* harmony default export */ var dom = (domHelper);\n\n// CONCATENATED MODULE: ./node_modules/jeffs_frontend_lib/dist/src/watch.js\nvar watchHelper = /** @class */ (function () {\n    function watchHelper(_a) {\n        var nnInstance = _a.nnInstance, watchArgs = _a.watchArgs;\n        this.nnInstance = nnInstance;\n        this.watchArgs = watchArgs;\n    }\n    watchHelper.prototype.getRunWatchCallback = function (key) {\n        var _this = this;\n        return function () {\n            if (key in _this.watchArgs)\n                _this.watchArgs[key].bind(_this.nnInstance)();\n        };\n    };\n    return watchHelper;\n}());\n/* harmony default export */ var src_watch = (watchHelper);\n\n// CONCATENATED MODULE: ./node_modules/jeffs_frontend_lib/dist/src/data.js\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nfunction isObject(obj) {\n    return obj != null && obj.constructor.name === "Object";\n}\nvar reactiveData = /** @class */ (function () {\n    function reactiveData(_a) {\n        var initialData = _a.initialData, dataChangedCallback = _a.dataChangedCallback;\n        this.dataChangedCallback = dataChangedCallback;\n        this.data = initialData;\n        if (Array.isArray(initialData)) {\n            this.wrapArrayMethods();\n        }\n    }\n    reactiveData.prototype.wrapArrayMethods = function () {\n        var _this = this;\n        var dcCallbackClosure = this.dataChangedCallback;\n        Object.defineProperty(this.data, "__nn__wrapped", {\n            enumerable: false,\n            value: true,\n        });\n        ["sort", "pop", "push", "shift", "unshift"].forEach(function (pMethodName) {\n            //@ts-ignore\n            var originalMethod = Array.prototype[pMethodName];\n            Object.defineProperty(_this.data, pMethodName, {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var result = originalMethod.apply(this, args);\n                    dcCallbackClosure();\n                    return result;\n                },\n            });\n        });\n    };\n    reactiveData.prototype.wrapObjectProps = function () {\n        var _this = this;\n        Object.defineProperty(this.data, "__nn__wrapped", {\n            enumerable: false,\n            value: true,\n        });\n        Object.keys(this.data).forEach(function (key) {\n            var valClosure = _this.data[key];\n            Object.defineProperty(_this.data, key, {\n                get: function () { return valClosure; },\n                set: function (val) {\n                    valClosure = val;\n                    _this.dataChangedCallback();\n                },\n            });\n        });\n    };\n    reactiveData.prototype.getData = function () {\n        return this.data;\n    };\n    reactiveData.prototype.setData = function (value) {\n        var prev = this.data;\n        this.data = value;\n        if (Array.isArray(value) && value !== prev) {\n            //@ts-ignore\n            if (value.__nn__wrapped) {\n                this.data = __spreadArrays(this.data);\n            }\n            this.wrapArrayMethods();\n        }\n        else if (isObject(value))\n            this.wrapObjectProps();\n        if (this.dataChangedCallback)\n            this.dataChangedCallback();\n    };\n    return reactiveData;\n}());\n\n\n// CONCATENATED MODULE: ./node_modules/jeffs_frontend_lib/dist/src/dom/template_for_resolve.js\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\nfunction getCurrLevelNodes(_a) {\n    var nodeArrayValMap = _a.nodeArrayValMap, referencedArray = _a.referencedArray, scopeVars = _a.scopeVars, iterName = _a.iterName, referenceNode = _a.referenceNode;\n    var used = new Set();\n    return referencedArray.map(function (el) {\n        var _a;\n        if (nodeArrayValMap.has(el) && !used.has(el)) {\n            used.add(el);\n            return nodeArrayValMap.get(el);\n        }\n        var currLevelNodeInfo = {\n            node: referenceNode.cloneNode(true),\n            scope: __assign(__assign({}, scopeVars), (_a = {}, _a[iterName] = el, _a)),\n        };\n        nodeArrayValMap.set(el, currLevelNodeInfo);\n        used.add(el);\n        return currLevelNodeInfo;\n    });\n}\nfunction resolveChildFor(_a) {\n    var node = _a.node, scope = _a.scope, nodeToForChildren = _a.nodeToForChildren, valRenderCallbackMap = _a.valRenderCallbackMap, state = _a.state;\n    var currNodeForChildren;\n    if (nodeToForChildren.get(node))\n        currNodeForChildren = nodeToForChildren.get(node);\n    else {\n        currNodeForChildren = getNNForsOneLvl(node);\n        nodeToForChildren.set(node, currNodeForChildren);\n    }\n    currNodeForChildren.forEach(function (childForNode) {\n        if (valRenderCallbackMap.has(childForNode)) {\n            valRenderCallbackMap.get(childForNode)();\n        }\n        else\n            valRenderCallbackMap.set(childForNode, resolveFor(state, childForNode.getAttribute("nn-for"), childForNode, scope));\n    });\n}\nfunction getNNForsOneLvl(parentNode) {\n    var allNNFors = parentNode.querySelectorAll("*[nn-for]");\n    var invalidParents = [];\n    // qs should be depth first preorder\n    return Array.from(allNNFors).filter(function (el) {\n        var returnVal = !invalidParents.some(function (parent) {\n            return parent.contains(el);\n        });\n        invalidParents.push(el);\n        return returnVal;\n    });\n}\n\n// CONCATENATED MODULE: ./node_modules/jeffs_frontend_lib/dist/src/dom/template_for.js\nvar template_for_assign = (undefined && undefined.__assign) || function () {\n    template_for_assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return template_for_assign.apply(this, arguments);\n};\n\nvar inRegex = /^(.*) in (.*)/;\nfunction getBaseStateReference(expr) {\n    return /^.* in (\\w*)/.exec(expr)[1];\n}\nfunction getStateData(state, capGroupTwo) {\n    var propChain = capGroupTwo.split(".");\n    var curr = state;\n    propChain.forEach(function (prop) {\n        curr = curr[prop];\n    });\n    return curr;\n}\nfunction resolveFor(state, expr, referenceNode, scopeVars) {\n    if (scopeVars === void 0) { scopeVars = {}; }\n    var initialRenderDone = false;\n    var templateRoot = document.createElement("template");\n    var currLevelNodes;\n    var nodeArrayValMap = new Map();\n    var valRenderCallbackMap = new Map();\n    var nodeToForChildren = new Map();\n    referenceNode.removeAttribute("nn-for");\n    var render = function () {\n        var lookup = template_for_assign(template_for_assign({}, state), scopeVars);\n        if (!inRegex.test(expr)) {\n            referenceNode.innerHTML = getStateData(lookup, expr);\n            initialRenderDone = true;\n        }\n        else {\n            var _a = inRegex.exec(expr), _ = _a[0], iterName = _a[1], inArrayName = _a[2];\n            var referencedArray = lookup[inArrayName];\n            if (currLevelNodes) {\n                currLevelNodes.forEach(function (nodeInfo) { return nodeInfo.node.remove(); });\n            }\n            currLevelNodes = getCurrLevelNodes({\n                nodeArrayValMap: nodeArrayValMap,\n                referencedArray: referencedArray,\n                scopeVars: scopeVars,\n                iterName: iterName,\n                referenceNode: referenceNode,\n            });\n            currLevelNodes.forEach(function (_a) {\n                var node = _a.node, scope = _a.scope;\n                resolveChildFor({\n                    node: node,\n                    scope: scope,\n                    nodeToForChildren: nodeToForChildren,\n                    valRenderCallbackMap: valRenderCallbackMap,\n                    state: state,\n                });\n            });\n            var resolvedNodes = currLevelNodes.map(function (nodeData) { return nodeData.node; });\n            if (!initialRenderDone) {\n                referenceNode.replaceWith(templateRoot);\n            }\n            replaceNodeWithNodeList(templateRoot, resolvedNodes);\n            initialRenderDone = true;\n        }\n    };\n    render();\n    return render;\n}\nvar template_for_templateHelper = /** @class */ (function () {\n    function templateHelper(_a) {\n        var nnInstance = _a.nnInstance;\n        this.nnInstance = nnInstance;\n    }\n    templateHelper.prototype.resolveNNFors = function (currNode) {\n        var _this = this;\n        if (currNode === void 0) { currNode = this.nnInstance.$el; }\n        var forNodes = getNNForsOneLvl(currNode);\n        forNodes.forEach(function (node) {\n            var expr = node.getAttribute("nn-for");\n            var cb = resolveFor(_this.nnInstance.state, expr, node);\n            var baseStateReferenced = getBaseStateReference(expr);\n            var deps = _this.nnInstance.dynamicHTMLDependencies;\n            if (baseStateReferenced in deps)\n                deps[baseStateReferenced].add(cb);\n            else\n                deps[baseStateReferenced] = new Set([cb]);\n        });\n    };\n    return templateHelper;\n}());\n/* harmony default export */ var template_for = (template_for_templateHelper);\nfunction replaceNodeWithNodeList(nodeToReplace, nodeList) {\n    var prev;\n    nodeList.forEach(function (newNode) {\n        nodeToReplace.parentNode.insertBefore(newNode, prev ? prev.nextSibling : nodeToReplace.nextSibling);\n        prev = newNode;\n    });\n}\n\n// CONCATENATED MODULE: ./node_modules/jeffs_frontend_lib/dist/src/construct.js\n\n\n\n\n\nvar construct_nn = /** @class */ (function () {\n    function nn(_a) {\n        var el = _a.el, data = _a.data, computed = _a.computed, watch = _a.watch;\n        this.data = {};\n        this.state = {};\n        this.dependencies = {};\n        this.computedFns = {};\n        this.dependentNodes = {};\n        this.modelBindings = {};\n        this.dynamicHTMLDependencies = {};\n        if (el) {\n            this.domHelper = new dom({\n                nnInstance: this,\n                el: el,\n            });\n            this.domHelper.attach();\n            this.domHelper.initReactiveNodes();\n        }\n        if (data)\n            this.initData(data);\n        if (computed) {\n            this.computedHelper = new src_computed({\n                computedArgs: computed,\n                nnInstance: this,\n                nnDependencies: this.dependencies,\n                computedFns: this.computedFns,\n            });\n        }\n        if (watch) {\n            this.watchHelper = new src_watch({\n                watchArgs: watch,\n                nnInstance: this,\n            });\n        }\n        if (el) {\n            this.domHelper.initModelNodes();\n            this.templateHelper = new template_for({\n                nnInstance: this,\n            });\n            this.templateHelper.resolveNNFors();\n        }\n    }\n    nn.prototype.initData = function (data) {\n        var _this = this;\n        Object.keys(data).forEach(function (key) {\n            _this.makeReactiveData(key, data[key]);\n        });\n    };\n    nn.prototype.getDataChangedCallback = function (key) {\n        var _this = this;\n        return function () {\n            if (_this.computedHelper)\n                _this.computedHelper.getUpdateComputedCallback(key)();\n            if (_this.domHelper)\n                _this.domHelper.getDomUpdateCallback(key)();\n            if (_this.watchHelper)\n                _this.watchHelper.getRunWatchCallback(key)();\n        };\n    };\n    nn.prototype.setState = function (propChain, value) {\n        var curr = this.state;\n        var stateKey = propChain[0];\n        for (var i = 0; i < propChain.length - 1; i++) {\n            curr = curr[propChain[i]];\n        }\n        curr[propChain[propChain.length - 1]] = value;\n        this.state[stateKey] = this.state[stateKey];\n    };\n    nn.prototype.makeReactiveData = function (key, value) {\n        var rData = new reactiveData({\n            initialData: value,\n            dataChangedCallback: this.getDataChangedCallback(key),\n        });\n        Object.defineProperty(this.state, key, {\n            enumerable: true,\n            get: function () { return rData.getData(); },\n            set: function (val) { return rData.setData(val); },\n        });\n        rData.setData(value);\n    };\n    return nn;\n}());\n/* harmony default export */ var construct = (construct_nn);\n\n// CONCATENATED MODULE: ./src/examples/app1.ts\n\n/* harmony default export */ var app1 = (function (attachElSelector) {\n    var app = new construct({\n        el: attachElSelector,\n        data: {\n            exData: \'exData\',\n            description: "Here\'s a simple example: this instance has been made available globally\\n      as \'reactive1\'. The HTML content below is tied to the property \'exData\'. You can try modifying\\n      that data property by reassigning reactive1.state.exData. If you look at the state, you\'ll\\n      also find that this description is also a property on the state, which can also be changed!"\n        }\n    });\n    //@ts-ignore\n    window.reactive1 = app;\n});\n\n// CONCATENATED MODULE: ./src/index.ts\n\n\napp1(\'#ex1\');\nvar desc = new construct({\n    el: \'#desc\',\n    data: {\n        title: \'My Frontend Library\',\n        pars: [\n            "This is a frontend micro-library focusing on data reactivity\\n      and HTML data binding.",\n            "$NAME gives a small subset of the functionality frameworks like React, \\n      Angular, and Vue provide while also being less efficient and more infinite-loop\\n      prone.",\n            "It\'s very lightweight: 4kb min + gzip. $NAME is written entirely in TypeScript with\\n      no runtime dependencies."\n        ],\n        features: [\n            \'Reactive Data\',\n            \'Computed Properties\',\n            \'Property Watchers\',\n            \'Two-Way input binding\',\n            \'Declarative, reactive HTML list binding\'\n        ]\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvamVmZnNfZnJvbnRlbmRfbGliL2Rpc3Qvc3JjL2NvbXB1dGVkLmpzPzZkNDYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2plZmZzX2Zyb250ZW5kX2xpYi9kaXN0L3NyYy9kb20vZG9tLmpzPzVjZGMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2plZmZzX2Zyb250ZW5kX2xpYi9kaXN0L3NyYy93YXRjaC5qcz80MGE1Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qZWZmc19mcm9udGVuZF9saWIvZGlzdC9zcmMvZGF0YS5qcz9iNmRlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qZWZmc19mcm9udGVuZF9saWIvZGlzdC9zcmMvZG9tL3RlbXBsYXRlX2Zvcl9yZXNvbHZlLmpzPzBjMjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2plZmZzX2Zyb250ZW5kX2xpYi9kaXN0L3NyYy9kb20vdGVtcGxhdGVfZm9yLmpzPzU5NTMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2plZmZzX2Zyb250ZW5kX2xpYi9kaXN0L3NyYy9jb25zdHJ1Y3QuanM/NGI0YiIsIndlYnBhY2s6Ly8vLi9zcmMvZXhhbXBsZXMvYXBwMS50cz9lOTMxIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cz83MWJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsbUJBQW1CO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtB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O0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDBCQUEwQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSw4QkFBOEIsd0JBQXdCLEVBQUU7QUFDeEQsaUNBQWlDLDJCQUEyQixFQUFFO0FBQzlELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ2MsMERBQUUsRUFBQzs7O0FDdkZrQjtBQUNwQjtBQUNoQixrQkFBa0IsU0FBRTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDLEVBQUU7OztBQ1hpQztBQUNEO0FBQ25DLElBQUk7QUFDSixlQUFlLFNBQUU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tcHV0ZWRIZWxwZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY29tcHV0ZWRIZWxwZXIoX2EpIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkQXJncyA9IF9hLmNvbXB1dGVkQXJncywgbm5EZXBlbmRlbmNpZXMgPSBfYS5ubkRlcGVuZGVuY2llcywgY29tcHV0ZWRGbnMgPSBfYS5jb21wdXRlZEZucywgbm5JbnN0YW5jZSA9IF9hLm5uSW5zdGFuY2U7XG4gICAgICAgIHRoaXMuY29tcHV0ZWRBcmdzID0gY29tcHV0ZWRBcmdzO1xuICAgICAgICB0aGlzLm5uSW5zdGFuY2UgPSBubkluc3RhbmNlO1xuICAgICAgICB0aGlzLmNvbXB1dGVkRm5zID0gY29tcHV0ZWRGbnM7XG4gICAgICAgIHRoaXMubm5EZXBlbmRlbmNpZXMgPSBubkRlcGVuZGVuY2llcztcbiAgICAgICAgdGhpcy5pbml0Q29tcHV0ZWQoKTtcbiAgICB9XG4gICAgY29tcHV0ZWRIZWxwZXIucHJvdG90eXBlLmluaXRDb21wdXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5jb21wdXRlZEFyZ3MpLmZvckVhY2goZnVuY3Rpb24gKGNvbXB1dGVkUHJvcE5hbWUpIHtcbiAgICAgICAgICAgIF90aGlzLmluaXREZXBlbmRlbmN5KGNvbXB1dGVkUHJvcE5hbWUsIF90aGlzLmNvbXB1dGVkQXJnc1tjb21wdXRlZFByb3BOYW1lXS5kZXBlbmRlbmNpZXMpO1xuICAgICAgICAgICAgX3RoaXMuY29tcHV0ZWRGbnNbY29tcHV0ZWRQcm9wTmFtZV0gPSBfdGhpcy5jb21wdXRlZEFyZ3NbY29tcHV0ZWRQcm9wTmFtZV0uZm4uYmluZChfdGhpcy5ubkluc3RhbmNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB0b1Jlc29sdmUgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMuY29tcHV0ZWRBcmdzKSk7XG4gICAgICAgIHZhciB0cmllcyA9IDA7XG4gICAgICAgIHZhciBtYXhUcmllcyA9IHRvUmVzb2x2ZS5zaXplO1xuICAgICAgICB3aGlsZSAodHJpZXMgPCBtYXhUcmllcykge1xuICAgICAgICAgICAgdmFyIGFyciA9IEFycmF5LmZyb20odG9SZXNvbHZlKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgYXJyXzEgPSBhcnI7IF9pIDwgYXJyXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXB1dGVkUHJvcE5hbWUgPSBhcnJfMVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzb2x2ZURlcGVuZGVuY3koY29tcHV0ZWRQcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9SZXNvbHZlLmRlbGV0ZShjb21wdXRlZFByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRvUmVzb2x2ZS5zaXplKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRyaWVzKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgXCJ1bmFibGUgdG8gcmVzb2x2ZSBjb21wdXRlZCBkZXBlbmRlbmNpZXNcIjtcbiAgICB9O1xuICAgIGNvbXB1dGVkSGVscGVyLnByb3RvdHlwZS5pbml0RGVwZW5kZW5jeSA9IGZ1bmN0aW9uIChuYW1lLCBwcm9wRGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29tcHV0ZWRGbnNbbmFtZV0gPSB0aGlzLmNvbXB1dGVkQXJnc1tuYW1lXS5mbi5iaW5kKHRoaXMubm5JbnN0YW5jZSk7XG4gICAgICAgIHByb3BEZXBlbmRlbmNpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcERlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgIGlmIChwcm9wRGVwZW5kZW5jeSBpbiBfdGhpcy5ubkRlcGVuZGVuY2llcykge1xuICAgICAgICAgICAgICAgIF90aGlzLm5uRGVwZW5kZW5jaWVzW3Byb3BEZXBlbmRlbmN5XS5hZGQobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5ubkRlcGVuZGVuY2llc1twcm9wRGVwZW5kZW5jeV0gPSBuZXcgU2V0KFtuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29tcHV0ZWRIZWxwZXIucHJvdG90eXBlLmFsbERlcGVuZGVuY2llc1Jlc29sdmVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGN1cnJEZXBlbmRlbmNpZXMgPSB0aGlzLmNvbXB1dGVkQXJnc1tuYW1lXS5kZXBlbmRlbmNpZXM7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGN1cnJEZXBlbmRlbmNpZXMpLmV2ZXJ5KGZ1bmN0aW9uIChkZXBlbmRlbmN5KSB7IHJldHVybiBfdGhpcy5ubkluc3RhbmNlLnN0YXRlW2RlcGVuZGVuY3ldICE9PSB1bmRlZmluZWQ7IH0pO1xuICAgIH07XG4gICAgY29tcHV0ZWRIZWxwZXIucHJvdG90eXBlLnJlc29sdmVEZXBlbmRlbmN5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxsRGVwZW5kZW5jaWVzUmVzb2x2ZWQobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMubm5JbnN0YW5jZS5tYWtlUmVhY3RpdmVEYXRhKG5hbWUsIHRoaXMuY29tcHV0ZWRGbnNbbmFtZV0oKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBjb21wdXRlZEhlbHBlci5wcm90b3R5cGUuZ2V0VXBkYXRlQ29tcHV0ZWRDYWxsYmFjayA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChrZXkgaW4gX3RoaXMubm5JbnN0YW5jZS5kZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKF90aGlzLm5uSW5zdGFuY2UuZGVwZW5kZW5jaWVzW2tleV0pLmZvckVhY2goZnVuY3Rpb24gKGNvbXB1dGVkRGVwZW5kZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm5uSW5zdGFuY2Uuc3RhdGVbY29tcHV0ZWREZXBlbmRlbnRdID0gX3RoaXMuY29tcHV0ZWRGbnNbY29tcHV0ZWREZXBlbmRlbnRdKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gY29tcHV0ZWRIZWxwZXI7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgY29tcHV0ZWRIZWxwZXI7XG4iLCJ2YXIgZG9tSGVscGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRvbUhlbHBlcihfYSkge1xuICAgICAgICB2YXIgbm5JbnN0YW5jZSA9IF9hLm5uSW5zdGFuY2UsIGVsID0gX2EuZWw7XG4gICAgICAgIHRoaXMubm5JbnN0YW5jZSA9IG5uSW5zdGFuY2U7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICB9XG4gICAgZG9tSGVscGVyLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBubkluc3RhbmNlID0gdGhpcy5ubkluc3RhbmNlO1xuICAgICAgICBubkluc3RhbmNlLiRlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5lbCk7XG4gICAgICAgIGlmICghbm5JbnN0YW5jZS4kZWwpIHtcbiAgICAgICAgICAgIHRocm93IFwiY2Fubm90IGF0dGFjaCB0byBub25leGlzdGVudCBlbGVtZW50XCI7XG4gICAgICAgIH1cbiAgICAgICAgbm5JbnN0YW5jZS4kZWwuX19ubl9fID0gbm5JbnN0YW5jZTtcbiAgICB9O1xuICAgIGRvbUhlbHBlci5wcm90b3R5cGUuZ2V0RG9tVXBkYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbm5JbnN0YW5jZSA9IF90aGlzLm5uSW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoa2V5IGluIG5uSW5zdGFuY2UuZGVwZW5kZW50Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICBubkluc3RhbmNlLmRlcGVuZGVudE5vZGVzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gKG5vZGUuaW5uZXJIVE1MID0gbm5JbnN0YW5jZS5zdGF0ZVtrZXldKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5IGluIG5uSW5zdGFuY2UubW9kZWxCaW5kaW5ncykge1xuICAgICAgICAgICAgICAgIG5uSW5zdGFuY2UubW9kZWxCaW5kaW5nc1trZXldLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIChub2RlLnZhbHVlID0gbm5JbnN0YW5jZS5zdGF0ZVtrZXldKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5IGluIG5uSW5zdGFuY2UuZHluYW1pY0hUTUxEZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKG5uSW5zdGFuY2UuZHluYW1pY0hUTUxEZXBlbmRlbmNpZXNba2V5XSkuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBkb21IZWxwZXIucHJvdG90eXBlLmluaXRSZWFjdGl2ZU5vZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm5JbnN0YW5jZSA9IHRoaXMubm5JbnN0YW5jZTtcbiAgICAgICAgdmFyIHJlYWN0aXZlTm9kZXMgPSBubkluc3RhbmNlLiRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKltubi10eHRdXCIpO1xuICAgICAgICByZWFjdGl2ZU5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciByZWFjdGluZ1RvID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJubi10eHRcIik7XG4gICAgICAgICAgICBpZiAoIW5uSW5zdGFuY2UuZGVwZW5kZW50Tm9kZXNbcmVhY3RpbmdUb10pXG4gICAgICAgICAgICAgICAgbm5JbnN0YW5jZS5kZXBlbmRlbnROb2Rlc1tyZWFjdGluZ1RvXSA9IFtub2RlXTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBubkluc3RhbmNlLmRlcGVuZGVudE5vZGVzW3JlYWN0aW5nVG9dLnB1c2gobm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZG9tSGVscGVyLnByb3RvdHlwZS5pbml0TW9kZWxOb2RlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1vZGVsTm9kZXMgPSB0aGlzLm5uSW5zdGFuY2UuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqW25uLW1vZGVsXVwiKTtcbiAgICAgICAgbW9kZWxOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgYm91bmQyID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJubi1tb2RlbFwiKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMubm5JbnN0YW5jZS5tb2RlbEJpbmRpbmdzW2JvdW5kMl0pXG4gICAgICAgICAgICAgICAgX3RoaXMubm5JbnN0YW5jZS5tb2RlbEJpbmRpbmdzW2JvdW5kMl0gPSBbbm9kZV07XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgX3RoaXMubm5JbnN0YW5jZS5tb2RlbEJpbmRpbmdzW2JvdW5kMl0ucHVzaChub2RlKTtcbiAgICAgICAgICAgIG5vZGUudmFsdWUgPSBfdGhpcy5ubkluc3RhbmNlLnN0YXRlW2JvdW5kMl07XG4gICAgICAgICAgICBub2RlLm9uaW5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubm5JbnN0YW5jZS5zdGF0ZVtib3VuZDJdID0gbm9kZS52YWx1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIGRvbUhlbHBlcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBkb21IZWxwZXI7XG4iLCJ2YXIgd2F0Y2hIZWxwZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gd2F0Y2hIZWxwZXIoX2EpIHtcbiAgICAgICAgdmFyIG5uSW5zdGFuY2UgPSBfYS5ubkluc3RhbmNlLCB3YXRjaEFyZ3MgPSBfYS53YXRjaEFyZ3M7XG4gICAgICAgIHRoaXMubm5JbnN0YW5jZSA9IG5uSW5zdGFuY2U7XG4gICAgICAgIHRoaXMud2F0Y2hBcmdzID0gd2F0Y2hBcmdzO1xuICAgIH1cbiAgICB3YXRjaEhlbHBlci5wcm90b3R5cGUuZ2V0UnVuV2F0Y2hDYWxsYmFjayA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChrZXkgaW4gX3RoaXMud2F0Y2hBcmdzKVxuICAgICAgICAgICAgICAgIF90aGlzLndhdGNoQXJnc1trZXldLmJpbmQoX3RoaXMubm5JbnN0YW5jZSkoKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiB3YXRjaEhlbHBlcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCB3YXRjaEhlbHBlcjtcbiIsInZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgICAgcltrXSA9IGFbal07XG4gICAgcmV0dXJuIHI7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gXCJPYmplY3RcIjtcbn1cbnZhciByZWFjdGl2ZURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gcmVhY3RpdmVEYXRhKF9hKSB7XG4gICAgICAgIHZhciBpbml0aWFsRGF0YSA9IF9hLmluaXRpYWxEYXRhLCBkYXRhQ2hhbmdlZENhbGxiYWNrID0gX2EuZGF0YUNoYW5nZWRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5kYXRhQ2hhbmdlZENhbGxiYWNrID0gZGF0YUNoYW5nZWRDYWxsYmFjaztcbiAgICAgICAgdGhpcy5kYXRhID0gaW5pdGlhbERhdGE7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGluaXRpYWxEYXRhKSkge1xuICAgICAgICAgICAgdGhpcy53cmFwQXJyYXlNZXRob2RzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVhY3RpdmVEYXRhLnByb3RvdHlwZS53cmFwQXJyYXlNZXRob2RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZGNDYWxsYmFja0Nsb3N1cmUgPSB0aGlzLmRhdGFDaGFuZ2VkQ2FsbGJhY2s7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmRhdGEsIFwiX19ubl9fd3JhcHBlZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgW1wic29ydFwiLCBcInBvcFwiLCBcInB1c2hcIiwgXCJzaGlmdFwiLCBcInVuc2hpZnRcIl0uZm9yRWFjaChmdW5jdGlvbiAocE1ldGhvZE5hbWUpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsTWV0aG9kID0gQXJyYXkucHJvdG90eXBlW3BNZXRob2ROYW1lXTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcy5kYXRhLCBwTWV0aG9kTmFtZSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICBkY0NhbGxiYWNrQ2xvc3VyZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZWFjdGl2ZURhdGEucHJvdG90eXBlLndyYXBPYmplY3RQcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJfX25uX193cmFwcGVkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbENsb3N1cmUgPSBfdGhpcy5kYXRhW2tleV07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXMuZGF0YSwga2V5LCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxDbG9zdXJlOyB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICB2YWxDbG9zdXJlID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kYXRhQ2hhbmdlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJlYWN0aXZlRGF0YS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9O1xuICAgIHJlYWN0aXZlRGF0YS5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcHJldiA9IHRoaXMuZGF0YTtcbiAgICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZSAhPT0gcHJldikge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAodmFsdWUuX19ubl9fd3JhcHBlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IF9fc3ByZWFkQXJyYXlzKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLndyYXBBcnJheU1ldGhvZHMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpXG4gICAgICAgICAgICB0aGlzLndyYXBPYmplY3RQcm9wcygpO1xuICAgICAgICBpZiAodGhpcy5kYXRhQ2hhbmdlZENhbGxiYWNrKVxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbmdlZENhbGxiYWNrKCk7XG4gICAgfTtcbiAgICByZXR1cm4gcmVhY3RpdmVEYXRhO1xufSgpKTtcbmV4cG9ydCB7IHJlYWN0aXZlRGF0YSB9O1xuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbmltcG9ydCB7IHJlc29sdmVGb3IgfSBmcm9tIFwiLi90ZW1wbGF0ZV9mb3JcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyTGV2ZWxOb2RlcyhfYSkge1xuICAgIHZhciBub2RlQXJyYXlWYWxNYXAgPSBfYS5ub2RlQXJyYXlWYWxNYXAsIHJlZmVyZW5jZWRBcnJheSA9IF9hLnJlZmVyZW5jZWRBcnJheSwgc2NvcGVWYXJzID0gX2Euc2NvcGVWYXJzLCBpdGVyTmFtZSA9IF9hLml0ZXJOYW1lLCByZWZlcmVuY2VOb2RlID0gX2EucmVmZXJlbmNlTm9kZTtcbiAgICB2YXIgdXNlZCA9IG5ldyBTZXQoKTtcbiAgICByZXR1cm4gcmVmZXJlbmNlZEFycmF5Lm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAobm9kZUFycmF5VmFsTWFwLmhhcyhlbCkgJiYgIXVzZWQuaGFzKGVsKSkge1xuICAgICAgICAgICAgdXNlZC5hZGQoZWwpO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVBcnJheVZhbE1hcC5nZXQoZWwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyTGV2ZWxOb2RlSW5mbyA9IHtcbiAgICAgICAgICAgIG5vZGU6IHJlZmVyZW5jZU5vZGUuY2xvbmVOb2RlKHRydWUpLFxuICAgICAgICAgICAgc2NvcGU6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzY29wZVZhcnMpLCAoX2EgPSB7fSwgX2FbaXRlck5hbWVdID0gZWwsIF9hKSksXG4gICAgICAgIH07XG4gICAgICAgIG5vZGVBcnJheVZhbE1hcC5zZXQoZWwsIGN1cnJMZXZlbE5vZGVJbmZvKTtcbiAgICAgICAgdXNlZC5hZGQoZWwpO1xuICAgICAgICByZXR1cm4gY3VyckxldmVsTm9kZUluZm87XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNoaWxkRm9yKF9hKSB7XG4gICAgdmFyIG5vZGUgPSBfYS5ub2RlLCBzY29wZSA9IF9hLnNjb3BlLCBub2RlVG9Gb3JDaGlsZHJlbiA9IF9hLm5vZGVUb0ZvckNoaWxkcmVuLCB2YWxSZW5kZXJDYWxsYmFja01hcCA9IF9hLnZhbFJlbmRlckNhbGxiYWNrTWFwLCBzdGF0ZSA9IF9hLnN0YXRlO1xuICAgIHZhciBjdXJyTm9kZUZvckNoaWxkcmVuO1xuICAgIGlmIChub2RlVG9Gb3JDaGlsZHJlbi5nZXQobm9kZSkpXG4gICAgICAgIGN1cnJOb2RlRm9yQ2hpbGRyZW4gPSBub2RlVG9Gb3JDaGlsZHJlbi5nZXQobm9kZSk7XG4gICAgZWxzZSB7XG4gICAgICAgIGN1cnJOb2RlRm9yQ2hpbGRyZW4gPSBnZXROTkZvcnNPbmVMdmwobm9kZSk7XG4gICAgICAgIG5vZGVUb0ZvckNoaWxkcmVuLnNldChub2RlLCBjdXJyTm9kZUZvckNoaWxkcmVuKTtcbiAgICB9XG4gICAgY3Vyck5vZGVGb3JDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZEZvck5vZGUpIHtcbiAgICAgICAgaWYgKHZhbFJlbmRlckNhbGxiYWNrTWFwLmhhcyhjaGlsZEZvck5vZGUpKSB7XG4gICAgICAgICAgICB2YWxSZW5kZXJDYWxsYmFja01hcC5nZXQoY2hpbGRGb3JOb2RlKSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHZhbFJlbmRlckNhbGxiYWNrTWFwLnNldChjaGlsZEZvck5vZGUsIHJlc29sdmVGb3Ioc3RhdGUsIGNoaWxkRm9yTm9kZS5nZXRBdHRyaWJ1dGUoXCJubi1mb3JcIiksIGNoaWxkRm9yTm9kZSwgc2NvcGUpKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROTkZvcnNPbmVMdmwocGFyZW50Tm9kZSkge1xuICAgIHZhciBhbGxOTkZvcnMgPSBwYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqW25uLWZvcl1cIik7XG4gICAgdmFyIGludmFsaWRQYXJlbnRzID0gW107XG4gICAgLy8gcXMgc2hvdWxkIGJlIGRlcHRoIGZpcnN0IHByZW9yZGVyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oYWxsTk5Gb3JzKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciByZXR1cm5WYWwgPSAhaW52YWxpZFBhcmVudHMuc29tZShmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LmNvbnRhaW5zKGVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGludmFsaWRQYXJlbnRzLnB1c2goZWwpO1xuICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xuICAgIH0pO1xufVxuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbmltcG9ydCB7IGdldE5ORm9yc09uZUx2bCwgZ2V0Q3VyckxldmVsTm9kZXMsIHJlc29sdmVDaGlsZEZvciwgfSBmcm9tIFwiLi90ZW1wbGF0ZV9mb3JfcmVzb2x2ZVwiO1xuZXhwb3J0IHZhciBpblJlZ2V4ID0gL14oLiopIGluICguKikvO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJhc2VTdGF0ZVJlZmVyZW5jZShleHByKSB7XG4gICAgcmV0dXJuIC9eLiogaW4gKFxcdyopLy5leGVjKGV4cHIpWzFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRlRGF0YShzdGF0ZSwgY2FwR3JvdXBUd28pIHtcbiAgICB2YXIgcHJvcENoYWluID0gY2FwR3JvdXBUd28uc3BsaXQoXCIuXCIpO1xuICAgIHZhciBjdXJyID0gc3RhdGU7XG4gICAgcHJvcENoYWluLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgY3VyciA9IGN1cnJbcHJvcF07XG4gICAgfSk7XG4gICAgcmV0dXJuIGN1cnI7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUZvcihzdGF0ZSwgZXhwciwgcmVmZXJlbmNlTm9kZSwgc2NvcGVWYXJzKSB7XG4gICAgaWYgKHNjb3BlVmFycyA9PT0gdm9pZCAwKSB7IHNjb3BlVmFycyA9IHt9OyB9XG4gICAgdmFyIGluaXRpYWxSZW5kZXJEb25lID0gZmFsc2U7XG4gICAgdmFyIHRlbXBsYXRlUm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICB2YXIgY3VyckxldmVsTm9kZXM7XG4gICAgdmFyIG5vZGVBcnJheVZhbE1hcCA9IG5ldyBNYXAoKTtcbiAgICB2YXIgdmFsUmVuZGVyQ2FsbGJhY2tNYXAgPSBuZXcgTWFwKCk7XG4gICAgdmFyIG5vZGVUb0ZvckNoaWxkcmVuID0gbmV3IE1hcCgpO1xuICAgIHJlZmVyZW5jZU5vZGUucmVtb3ZlQXR0cmlidXRlKFwibm4tZm9yXCIpO1xuICAgIHZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsb29rdXAgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCBzY29wZVZhcnMpO1xuICAgICAgICBpZiAoIWluUmVnZXgudGVzdChleHByKSkge1xuICAgICAgICAgICAgcmVmZXJlbmNlTm9kZS5pbm5lckhUTUwgPSBnZXRTdGF0ZURhdGEobG9va3VwLCBleHByKTtcbiAgICAgICAgICAgIGluaXRpYWxSZW5kZXJEb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGluUmVnZXguZXhlYyhleHByKSwgXyA9IF9hWzBdLCBpdGVyTmFtZSA9IF9hWzFdLCBpbkFycmF5TmFtZSA9IF9hWzJdO1xuICAgICAgICAgICAgdmFyIHJlZmVyZW5jZWRBcnJheSA9IGxvb2t1cFtpbkFycmF5TmFtZV07XG4gICAgICAgICAgICBpZiAoY3VyckxldmVsTm9kZXMpIHtcbiAgICAgICAgICAgICAgICBjdXJyTGV2ZWxOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlSW5mbykgeyByZXR1cm4gbm9kZUluZm8ubm9kZS5yZW1vdmUoKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyTGV2ZWxOb2RlcyA9IGdldEN1cnJMZXZlbE5vZGVzKHtcbiAgICAgICAgICAgICAgICBub2RlQXJyYXlWYWxNYXA6IG5vZGVBcnJheVZhbE1hcCxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VkQXJyYXk6IHJlZmVyZW5jZWRBcnJheSxcbiAgICAgICAgICAgICAgICBzY29wZVZhcnM6IHNjb3BlVmFycyxcbiAgICAgICAgICAgICAgICBpdGVyTmFtZTogaXRlck5hbWUsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlTm9kZTogcmVmZXJlbmNlTm9kZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3VyckxldmVsTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IF9hLm5vZGUsIHNjb3BlID0gX2Euc2NvcGU7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZUNoaWxkRm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICBub2RlVG9Gb3JDaGlsZHJlbjogbm9kZVRvRm9yQ2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICAgIHZhbFJlbmRlckNhbGxiYWNrTWFwOiB2YWxSZW5kZXJDYWxsYmFja01hcCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWROb2RlcyA9IGN1cnJMZXZlbE5vZGVzLm1hcChmdW5jdGlvbiAobm9kZURhdGEpIHsgcmV0dXJuIG5vZGVEYXRhLm5vZGU7IH0pO1xuICAgICAgICAgICAgaWYgKCFpbml0aWFsUmVuZGVyRG9uZSkge1xuICAgICAgICAgICAgICAgIHJlZmVyZW5jZU5vZGUucmVwbGFjZVdpdGgodGVtcGxhdGVSb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcGxhY2VOb2RlV2l0aE5vZGVMaXN0KHRlbXBsYXRlUm9vdCwgcmVzb2x2ZWROb2Rlcyk7XG4gICAgICAgICAgICBpbml0aWFsUmVuZGVyRG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJlbmRlcigpO1xuICAgIHJldHVybiByZW5kZXI7XG59XG52YXIgdGVtcGxhdGVIZWxwZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gdGVtcGxhdGVIZWxwZXIoX2EpIHtcbiAgICAgICAgdmFyIG5uSW5zdGFuY2UgPSBfYS5ubkluc3RhbmNlO1xuICAgICAgICB0aGlzLm5uSW5zdGFuY2UgPSBubkluc3RhbmNlO1xuICAgIH1cbiAgICB0ZW1wbGF0ZUhlbHBlci5wcm90b3R5cGUucmVzb2x2ZU5ORm9ycyA9IGZ1bmN0aW9uIChjdXJyTm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoY3Vyck5vZGUgPT09IHZvaWQgMCkgeyBjdXJyTm9kZSA9IHRoaXMubm5JbnN0YW5jZS4kZWw7IH1cbiAgICAgICAgdmFyIGZvck5vZGVzID0gZ2V0Tk5Gb3JzT25lTHZsKGN1cnJOb2RlKTtcbiAgICAgICAgZm9yTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIGV4cHIgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5uLWZvclwiKTtcbiAgICAgICAgICAgIHZhciBjYiA9IHJlc29sdmVGb3IoX3RoaXMubm5JbnN0YW5jZS5zdGF0ZSwgZXhwciwgbm9kZSk7XG4gICAgICAgICAgICB2YXIgYmFzZVN0YXRlUmVmZXJlbmNlZCA9IGdldEJhc2VTdGF0ZVJlZmVyZW5jZShleHByKTtcbiAgICAgICAgICAgIHZhciBkZXBzID0gX3RoaXMubm5JbnN0YW5jZS5keW5hbWljSFRNTERlcGVuZGVuY2llcztcbiAgICAgICAgICAgIGlmIChiYXNlU3RhdGVSZWZlcmVuY2VkIGluIGRlcHMpXG4gICAgICAgICAgICAgICAgZGVwc1tiYXNlU3RhdGVSZWZlcmVuY2VkXS5hZGQoY2IpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRlcHNbYmFzZVN0YXRlUmVmZXJlbmNlZF0gPSBuZXcgU2V0KFtjYl0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB0ZW1wbGF0ZUhlbHBlcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCB0ZW1wbGF0ZUhlbHBlcjtcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlTm9kZVdpdGhOb2RlTGlzdChub2RlVG9SZXBsYWNlLCBub2RlTGlzdCkge1xuICAgIHZhciBwcmV2O1xuICAgIG5vZGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKG5ld05vZGUpIHtcbiAgICAgICAgbm9kZVRvUmVwbGFjZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCBwcmV2ID8gcHJldi5uZXh0U2libGluZyA6IG5vZGVUb1JlcGxhY2UubmV4dFNpYmxpbmcpO1xuICAgICAgICBwcmV2ID0gbmV3Tm9kZTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCBjb21wdXRlZEhlbHBlciBmcm9tIFwiLi9jb21wdXRlZFwiO1xuaW1wb3J0IGRvbUhlbHBlciBmcm9tIFwiLi9kb20vZG9tXCI7XG5pbXBvcnQgd2F0Y2hIZWxwZXIgZnJvbSBcIi4vd2F0Y2hcIjtcbmltcG9ydCB7IHJlYWN0aXZlRGF0YSB9IGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCB0ZW1wbGF0ZUhlbHBlciBmcm9tIFwiLi9kb20vdGVtcGxhdGVfZm9yXCI7XG52YXIgbm4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gbm4oX2EpIHtcbiAgICAgICAgdmFyIGVsID0gX2EuZWwsIGRhdGEgPSBfYS5kYXRhLCBjb21wdXRlZCA9IF9hLmNvbXB1dGVkLCB3YXRjaCA9IF9hLndhdGNoO1xuICAgICAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbXB1dGVkRm5zID0ge307XG4gICAgICAgIHRoaXMuZGVwZW5kZW50Tm9kZXMgPSB7fTtcbiAgICAgICAgdGhpcy5tb2RlbEJpbmRpbmdzID0ge307XG4gICAgICAgIHRoaXMuZHluYW1pY0hUTUxEZXBlbmRlbmNpZXMgPSB7fTtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICB0aGlzLmRvbUhlbHBlciA9IG5ldyBkb21IZWxwZXIoe1xuICAgICAgICAgICAgICAgIG5uSW5zdGFuY2U6IHRoaXMsXG4gICAgICAgICAgICAgICAgZWw6IGVsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmRvbUhlbHBlci5hdHRhY2goKTtcbiAgICAgICAgICAgIHRoaXMuZG9tSGVscGVyLmluaXRSZWFjdGl2ZU5vZGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEpXG4gICAgICAgICAgICB0aGlzLmluaXREYXRhKGRhdGEpO1xuICAgICAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZWRIZWxwZXIgPSBuZXcgY29tcHV0ZWRIZWxwZXIoe1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkQXJnczogY29tcHV0ZWQsXG4gICAgICAgICAgICAgICAgbm5JbnN0YW5jZTogdGhpcyxcbiAgICAgICAgICAgICAgICBubkRlcGVuZGVuY2llczogdGhpcy5kZXBlbmRlbmNpZXMsXG4gICAgICAgICAgICAgICAgY29tcHV0ZWRGbnM6IHRoaXMuY29tcHV0ZWRGbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2F0Y2gpIHtcbiAgICAgICAgICAgIHRoaXMud2F0Y2hIZWxwZXIgPSBuZXcgd2F0Y2hIZWxwZXIoe1xuICAgICAgICAgICAgICAgIHdhdGNoQXJnczogd2F0Y2gsXG4gICAgICAgICAgICAgICAgbm5JbnN0YW5jZTogdGhpcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgdGhpcy5kb21IZWxwZXIuaW5pdE1vZGVsTm9kZXMoKTtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVIZWxwZXIgPSBuZXcgdGVtcGxhdGVIZWxwZXIoe1xuICAgICAgICAgICAgICAgIG5uSW5zdGFuY2U6IHRoaXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVIZWxwZXIucmVzb2x2ZU5ORm9ycygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5uLnByb3RvdHlwZS5pbml0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgX3RoaXMubWFrZVJlYWN0aXZlRGF0YShrZXksIGRhdGFba2V5XSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgbm4ucHJvdG90eXBlLmdldERhdGFDaGFuZ2VkQ2FsbGJhY2sgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY29tcHV0ZWRIZWxwZXIpXG4gICAgICAgICAgICAgICAgX3RoaXMuY29tcHV0ZWRIZWxwZXIuZ2V0VXBkYXRlQ29tcHV0ZWRDYWxsYmFjayhrZXkpKCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuZG9tSGVscGVyKVxuICAgICAgICAgICAgICAgIF90aGlzLmRvbUhlbHBlci5nZXREb21VcGRhdGVDYWxsYmFjayhrZXkpKCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMud2F0Y2hIZWxwZXIpXG4gICAgICAgICAgICAgICAgX3RoaXMud2F0Y2hIZWxwZXIuZ2V0UnVuV2F0Y2hDYWxsYmFjayhrZXkpKCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBubi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAocHJvcENoYWluLCB2YWx1ZSkge1xuICAgICAgICB2YXIgY3VyciA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHZhciBzdGF0ZUtleSA9IHByb3BDaGFpblswXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wQ2hhaW4ubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyID0gY3Vycltwcm9wQ2hhaW5baV1dO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJbcHJvcENoYWluW3Byb3BDaGFpbi5sZW5ndGggLSAxXV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZVtzdGF0ZUtleV0gPSB0aGlzLnN0YXRlW3N0YXRlS2V5XTtcbiAgICB9O1xuICAgIG5uLnByb3RvdHlwZS5tYWtlUmVhY3RpdmVEYXRhID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJEYXRhID0gbmV3IHJlYWN0aXZlRGF0YSh7XG4gICAgICAgICAgICBpbml0aWFsRGF0YTogdmFsdWUsXG4gICAgICAgICAgICBkYXRhQ2hhbmdlZENhbGxiYWNrOiB0aGlzLmdldERhdGFDaGFuZ2VkQ2FsbGJhY2soa2V5KSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnN0YXRlLCBrZXksIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJEYXRhLmdldERhdGEoKTsgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gckRhdGEuc2V0RGF0YSh2YWwpOyB9LFxuICAgICAgICB9KTtcbiAgICAgICAgckRhdGEuc2V0RGF0YSh2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gbm47XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgbm47XG4iLCJpbXBvcnQgbm4gZnJvbSAnamVmZnNfZnJvbnRlbmRfbGliJztcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoYXR0YWNoRWxTZWxlY3Rvcikge1xuICAgIHZhciBhcHAgPSBuZXcgbm4oe1xuICAgICAgICBlbDogYXR0YWNoRWxTZWxlY3RvcixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZXhEYXRhOiAnZXhEYXRhJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkhlcmUncyBhIHNpbXBsZSBleGFtcGxlOiB0aGlzIGluc3RhbmNlIGhhcyBiZWVuIG1hZGUgYXZhaWxhYmxlIGdsb2JhbGx5XFxuICAgICAgYXMgJ3JlYWN0aXZlMScuIFRoZSBIVE1MIGNvbnRlbnQgYmVsb3cgaXMgdGllZCB0byB0aGUgcHJvcGVydHkgJ2V4RGF0YScuIFlvdSBjYW4gdHJ5IG1vZGlmeWluZ1xcbiAgICAgIHRoYXQgZGF0YSBwcm9wZXJ0eSBieSByZWFzc2lnbmluZyByZWFjdGl2ZTEuc3RhdGUuZXhEYXRhLiBJZiB5b3UgbG9vayBhdCB0aGUgc3RhdGUsIHlvdSdsbFxcbiAgICAgIGFsc28gZmluZCB0aGF0IHRoaXMgZGVzY3JpcHRpb24gaXMgYWxzbyBhIHByb3BlcnR5IG9uIHRoZSBzdGF0ZSwgd2hpY2ggY2FuIGFsc28gYmUgY2hhbmdlZCFcIlxuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgd2luZG93LnJlYWN0aXZlMSA9IGFwcDtcbn0pO1xuIiwiaW1wb3J0IG5uIGZyb20gXCJqZWZmc19mcm9udGVuZF9saWJcIjtcbmltcG9ydCBhcHAxIGZyb20gJy4vZXhhbXBsZXMvYXBwMSc7XG5hcHAxKCcjZXgxJyk7XG52YXIgZGVzYyA9IG5ldyBubih7XG4gICAgZWw6ICcjZGVzYycsXG4gICAgZGF0YToge1xuICAgICAgICB0aXRsZTogJ015IEZyb250ZW5kIExpYnJhcnknLFxuICAgICAgICBwYXJzOiBbXG4gICAgICAgICAgICBcIlRoaXMgaXMgYSBmcm9udGVuZCBtaWNyby1saWJyYXJ5IGZvY3VzaW5nIG9uIGRhdGEgcmVhY3Rpdml0eVxcbiAgICAgIGFuZCBIVE1MIGRhdGEgYmluZGluZy5cIixcbiAgICAgICAgICAgIFwiJE5BTUUgZ2l2ZXMgYSBzbWFsbCBzdWJzZXQgb2YgdGhlIGZ1bmN0aW9uYWxpdHkgZnJhbWV3b3JrcyBsaWtlIFJlYWN0LCBcXG4gICAgICBBbmd1bGFyLCBhbmQgVnVlIHByb3ZpZGUgd2hpbGUgYWxzbyBiZWluZyBsZXNzIGVmZmljaWVudCBhbmQgbW9yZSBpbmZpbml0ZS1sb29wXFxuICAgICAgcHJvbmUuXCIsXG4gICAgICAgICAgICBcIkl0J3MgdmVyeSBsaWdodHdlaWdodDogNGtiIG1pbiArIGd6aXAuICROQU1FIGlzIHdyaXR0ZW4gZW50aXJlbHkgaW4gVHlwZVNjcmlwdCB3aXRoXFxuICAgICAgbm8gcnVudGltZSBkZXBlbmRlbmNpZXMuXCJcbiAgICAgICAgXSxcbiAgICAgICAgZmVhdHVyZXM6IFtcbiAgICAgICAgICAgICdSZWFjdGl2ZSBEYXRhJyxcbiAgICAgICAgICAgICdDb21wdXRlZCBQcm9wZXJ0aWVzJyxcbiAgICAgICAgICAgICdQcm9wZXJ0eSBXYXRjaGVycycsXG4gICAgICAgICAgICAnVHdvLVdheSBpbnB1dCBiaW5kaW5nJyxcbiAgICAgICAgICAgICdEZWNsYXJhdGl2ZSwgcmVhY3RpdmUgSFRNTCBsaXN0IGJpbmRpbmcnXG4gICAgICAgIF1cbiAgICB9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')}]);